@{
    ViewBag.Title = "Ingredients for " + Model.parentName;
}

<script type="text/html" id="templateIngredientView">
    <tr>
        <td data-bind="text: item.Id"></td>
        <td data-bind="text: item.Description"></td>
        <td data-bind="text: $root.lookupProduct(item.ProductId())"></td>
        <td>
            <button class="show-on-hover btn btn-default btn-xs" type="button"><span class="glyphicon glyphicon-edit" data-bind="click: $root.beginEdit"></span></button>
        </td>
    </tr>
</script>

<script type="text/html" id="editTemplateIngredientView">
    <tr>
        <td data-bind="text: item.Id"></td>
        <td><input class="form-control" data-bind="textInput: item.Description" /></td>
        <td>
            <select class="form-control" data-bind="options: $root.products,
                       optionsText: 'Name',
                       optionsValue: 'Id',
                       value: item.ProductId,
                       optionsCaption: 'Choose...'"></select>
        </td>
        <td>
            <button class="btn btn-success btn-xs" type="button"><span class="glyphicon glyphicon-save green" data-bind="click: $root.save"></span></button>
            <button class="btn btn-danger btn-xs" type="button"><span class="glyphicon glyphicon-remove" data-bind="click: $root.delete"></span></button>
            <button class="btn btn-default btn-xs" type="button"><span class="glyphicon glyphicon-new-window" data-bind="click: $root.cancelEdit"></span></button>
        </td>
    </tr>
</script>

<div id="IngredientView">
    <p data-bind="messageSlide: errorMessage, messageSlideDuration: 5000"></p>

    <h2><span data-bind="text: $root.items().length"></span> @ViewBag.Title </h2>

    <table class="dataTable table table-metro-header table-left-thead-align table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Description</th>
                <th>Product</th>
                <th>Action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>
            </tr>
            <tr data-bind="foreach: { data: search, as: 'item' }">
                <td><input class="form-control" data-bind="textInput: item.Id" /></td>
                <td><input class="form-control" data-bind="textInput: item.Description" /></td>
                <td>
                    <select class="form-control" data-bind="options: $root.productsSelected,
                        optionsText: 'Name',
                        optionsValue: 'Id',
                        value: item.ProductId,
                        optionsCaption: 'Choose...'"></select>
                </td>
                <td>
                    <button class="btn btn-primary btn-xs" type="button"><span class="glyphicon glyphicon-search" data-bind="click: $root.load"></span></button>
                    <button class="btn btn-success btn-xs" type="button"><span class="glyphicon glyphicon-plus" data-bind="click: $root.add"></span></button>
                </td>
            </tr>
        </thead>
        <tbody data-bind="template: { name: $root.getTemplateName, foreach: items, as: 'item' }"></tbody>
    </table>
</div>

<script>
    var parentQuery = '?parentId=' + @Model.parentId;

    var model;
    $(function() {
        var view = 'IngredientView';
        var url = '@Url.Content("~/Ingredient")';
        var ingredientModel = new RestBackedViewModel({
            postUrl: url + '/Post' + parentQuery,
            putUrl: url + '/Put' + parentQuery,
            deleteUrl: url + '/Delete' + parentQuery,
            jsonUrl: url + '/Get' + parentQuery,
            viewName: view,
            baseUrl: url,
            search: { Id: '', Name: '' }
        });

        ingredientModel.products = ko.observable([]);

        ingredientModel.productsSelected = ko.pureComputed(function() {
            var productIds = ingredientModel.items().map(function(item) {
                return item.ProductId();
            });
            return ingredientModel.products().filter(function(product) {
                return productIds.indexOf(product.Id) > -1;
            });
        }, ingredientModel);
        
        ingredientModel.lookupProduct = function (id) {
            if (typeof id === 'undefined' || id === null) {
                return 'undefined or null';
            }

            var products = ingredientModel.products();
            if (products.length === 0) {
                return id;
            }
            var filtered = products.filter(function (element) {
                return element.Id === id;
            });
            if (filtered.length === 0) {
                return id;
            }
            if (filtered.length > 1) {
                return "More than one product was found by id: " + id;
            }

            return filtered[0].Name;
        };

        $.getJSON('@Url.Content("~/Product/Get")', function(array) {
            ingredientModel.products(array);
        }).fail(function(error) {
            alert(error);
        });

        ko.applyBindings(ingredientModel, document.getElementById(view));

        model = ingredientModel;
    });
</script>


